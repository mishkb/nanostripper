#/usr/bin/env python

import argparse
import os
import sys
import tempfile
import subprocess
import h5py
from ont_fast5_api.fast5_interface import get_fast5_file
from ont_fast5_api.analysis_tools.basecall_1d import Basecall1DTools

parser = argparse.ArgumentParser(description='Strip reads from Oxford Nanopore FAST5 files if/unless they meet certain reference match criteria using minimap2.')
parser.add_argument('pos_ref_file', type=argparse.FileType('r'), 
		    help='reference FastA DNA file for FAST5 inclusion using minimap2 (or a pre-built .mmi index)')
parser.add_argument('neg_ref_file', type=argparse.FileType('r'), 
		    help='reference FastA DNA file for FAST5 exclusion using minimap2 (or a pre-built .mmi index), override inclusion criterion')
parser.add_argument('fast5_file', type=argparse.FileType('r'), nargs='+',
                    help='a FAST5 file to process (must have basecalls already included)')
parser.add_argument('-out', default="stripped",
                    help='directory where modified FAST5 files will be written (default: "stripped")')
parser.add_argument('-t', type=int, default=3,
                    help='number of threads to use for minimap2 (default: 3)')
parser.add_argument('-m', type=int, default=20,
                    help='minimum minimap2 mapping quality to consider an alignment as a match (default: 20)')
args = parser.parse_args()

if os.path.exists(args.out):
	assert os.path.isdir(args.out), 'Output path exists but is not a directory'
else:
        os.mkdir(args.out)
summary_file = open(os.path.join(args.out, 'nanostripper_summary.txt'), 'w')

for fast5_file in args.fast5_file: # Only really makes sense for multi-read files
	# Check which reads in the files need to be removed
	read_count = 0
	read_lengths = {}
	to_remove = {}
	to_retain = {}
	temp_fastq_file = tempfile.NamedTemporaryFile(delete=False, mode='w+t')
	f5 = get_fast5_file(fast5_file.name, mode='r')
	for read_id in f5.get_read_ids():
		read = f5.get_read(read_id)
		basecall = Basecall1DTools(read);
		(name, sequence, quals) = basecall.get_called_sequence(section="template")
		read_name = 'read_'+name.split()[0]
		print('@'+read_name+'\n'+sequence+'\n+\n'+quals, file=temp_fastq_file)
		read_lengths[read_name] = len(sequence)
		#temp_fastq_file.write(basecall.get_called_sequence(section="template", fastq=True).encode('utf-8'))
		read_count += 1
	temp_fastq_file.close()

	minimap2_paf_output = subprocess.check_output(['minimap2', '-x', 'map-ont', '-t', str(args.t), args.pos_ref_file.name, temp_fastq_file.name])
	for line in minimap2_paf_output.splitlines():
		values = line.decode('utf-8').split('\t')
		read_id = values[0] # PAF formatted output from minimap2
		if not read_id in to_retain and int(values[11]) >= args.m:
			to_retain[read_id] = line  # Store the match info for the summary file

	minimap2_paf_output = subprocess.check_output(['minimap2', '-x', 'map-ont', '-t', str(args.t), args.neg_ref_file.name, temp_fastq_file.name])
	for line in minimap2_paf_output.splitlines():
		values = line.decode('utf-8').split('\t')
		read_id = values[0]
		if not read_id in to_remove and int(values[11]) >= args.m:
			to_remove[read_id] = line  # Store the match info for the summary file

	os.unlink(temp_fastq_file.name)

	# Do the data copy for reads matching the criteria 
	stripped_count = 0
	fin = h5py.File(fast5_file.name, 'r')
	fout = h5py.File(os.path.join(args.out, os.path.basename(fast5_file.name)), 'w')
	for attr in fin.attrs:
		fout.attrs[attr] = fin.attrs[attr]
	for read in fin:
		if read in to_remove: 
			print(to_remove[read].decode('utf-8'), file=summary_file)
			stripped_count += 1
		elif read in to_retain: 
			fin.copy(read, fout)
		else:
			print('\t'.join([read,str(read_lengths[read]),'0','1','+','*','0','0','1','0','0','255']), file=summary_file)
			stripped_count += 1

	print("{}: stripped {}/{} reads".format(fast5_file.name, stripped_count, read_count), file=sys.stderr)

summary_file.close()
